<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KyXu Tech</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2016-04-16T13:04:30.000Z</updated>
  <id>/</id>
  
  <author>
    <name>KyXu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ViewController 减负记录</title>
    <link href="/2016/04/16/ViewController-%E5%87%8F%E8%B4%9F%E8%AE%B0%E5%BD%95/"/>
    <id>/2016/04/16/ViewController-减负记录/</id>
    <published>2016-04-16T12:58:18.000Z</published>
    <updated>2016-04-16T13:04:30.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;&lt;p&gt;最近在重构一个以前写的老项目，在尝试给之前的 ViewController 减负，尽量抽离代码到其他文件。&lt;br&gt;想记录一些东西，看看以后返回来再看能不能有更好的想法；而现在，可以作为一个检验当前代码是否需要优化的一个标准。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;整合常量&quot;&gt;整合常量&lt;/h3&gt;&lt;p&gt;以前喜欢在 ViewController 的顶部（class 外面）写一些全局变量，这样虽然可以写一次创建的代码，就可以在整个项目的任意地方使用。但是，基本上你不可能只有一个 ViewController，有了这种习惯之后，会让全局变量没有逻辑地分散在不同的代码文件里，不易于管理（甚至可能会出现同一个东西以不同的名字被创建了多次的情况），而且代码可读性会严重降低（因为你看见这个变量的时候，你可能并不知道它是全局的）。&lt;/p&gt;
&lt;p&gt;解决起来其实很简单，我当前这个项目的缩写是 GM，于是我建了一个叫 GMConstants 的 Class，把所有之前的全局变量都放到这里，写成 &lt;code&gt;static let&lt;/code&gt; 的形式。（除非你真的知道这样没问题，否则不建议写 &lt;code&gt;static var&lt;/code&gt;，或创建 GMVariables Class，这样会导致你使用这些量的时候，依然不知道具体这些是什么，因为它们可能被更改过）&lt;/p&gt;
&lt;p&gt;比如之前我设定了我这个 App 中使用的所有的灰色都应该是一样的，我写了一个 gmGreyColor 的常量，使用的时候，你可能并不记得这么一个东西是全局的，并且担心除了灰色，还有什么颜色，是不是还有个 gmBlackColor？甚至你可能写了一个意义相同的 gmGrayColor，仅仅是因为 grey 和 gray 同义。而现在，你的使用方式应该是 &lt;code&gt;GMConstants.greyColor&lt;/code&gt;——一看便知是什么意思，而且按住 cmd 键，鼠标左击 GMConstants 关键词，你还可以看见你到底创建了几个类似这样的颜色。&lt;/p&gt;
&lt;p&gt;当你想写全局变量，或者发现某个局部变量，在不同的地方被多次使用的时候，就该考虑这个问题了。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;布尔标记&quot;&gt;布尔标记&lt;/h3&gt;&lt;p&gt;刚刚提到不建议以整合常量的方式来整合变量，不过后续又发现之前会用这样一种方式来处理逻辑：先写一个值为 &lt;code&gt;false&lt;/code&gt; 的布尔变量，以此作为一种标记，后续根据情况来不断地修改该值为  &lt;code&gt;true&lt;/code&gt; 或者 &lt;code&gt;false&lt;/code&gt; ，来判断某些语句是否应该执行。&lt;/p&gt;
&lt;p&gt;虽然目前认为这种方式并不是优雅的写法，因为这样一个布尔标记的作用范围太大了，虽然写代码的时候知道，某种情况 &lt;code&gt;true&lt;/code&gt;，另一种情况 &lt;code&gt;false&lt;/code&gt;，但以后修改的时候，就要求程序员有全局观才能尝试修改或移除这个标记。&lt;/p&gt;
&lt;p&gt;暂时没有想到很好的修改方法，但是认为这种情况下，可以像之前整理 &lt;code&gt;static let&lt;/code&gt; 一样来以 &lt;code&gt;static var&lt;/code&gt; 的形式来整理这些布尔类型的标记，可能取 class 名为 GMMarks。&lt;/p&gt;
&lt;p&gt;另外还可以自定义这些标记的 setter，比如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; imageSelected:&lt;span class=&quot;keyword&quot;&gt;Bool&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以这样自定义 setter：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;selectImage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    GMMarks.imageSelected = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
}
class &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deselectImage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    GMMarks.imageSelected = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;语义更清晰易懂&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;UIView_耦合&quot;&gt;UIView 耦合&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;self&lt;span class=&quot;class&quot;&gt;.view&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.addSubview&lt;/span&gt;(view1)
self&lt;span class=&quot;class&quot;&gt;.view&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.addSubview&lt;/span&gt;(view2)
self&lt;span class=&quot;class&quot;&gt;.view&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.addSubview&lt;/span&gt;(view3)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;假如说在 ViewController 里面看到上面这样的代码，同时发现 view1、view2、view3 之间就是简单的一层一层叠加而已，那么我们或许可以向之前一样建一个叫做 GMViews 的 class，然后把这三个 view 的创建都放在&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;xxView&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(frame frame:CGRect)&lt;/span&gt; -&amp;gt; &lt;span class=&quot;title&quot;&gt;UIView&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样一个方法里面，使用时也很简单&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let xxView = GMViews.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;xxView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(frame: xx)&lt;/span&gt;&lt;/span&gt;
self&lt;span class=&quot;class&quot;&gt;.view&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.addSubView&lt;/span&gt;(xxView)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个时候一定要注意，之前三个 view 在 ViewController 里面创建时，frame 是根据 self.view 这个 view 来写的，frame.origin 是一个 CGPoint，它表示的是相对于父级 view 的相对位置，而不是相对于你的 App 界面的绝对位置，所以抽离这部分代码的时候，确保你的各个 view 的 frame 写对（在支持横屏的时候，是不是还涉及其他问题）。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;抽离方法命名问题&quot;&gt;抽离方法命名问题&lt;/h2&gt;&lt;p&gt;MVC 令人诟病的一点是，以前写在 Controller 里面的业务逻辑很臃肿，现在加个 &lt;code&gt;func&lt;/code&gt; 关键字就抽离到 Model 里面，导致 Controller 不臃肿了，Model 反倒臃肿了。&lt;/p&gt;
&lt;p&gt;所以如果想要从之前臃肿的 ViewController 里面抽离到代码到新的类，一定要注意 Model 的命名问题。  &lt;/p&gt;
&lt;p&gt;比如说我现在要清理缓存，清理缓存这种事情应该说和当前的 ViewController 是没什么耦合性可言的，完全可以把这部分代码剥离出来，那么如果这时候我根据清理的具体内容不同，抽象出了三个函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clear1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {}&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clear2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {}&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clear3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果直接粗暴地把这三个方法填到一个叫做 GMTools 的类里面，把这些方法都加上  &lt;code&gt;class&lt;/code&gt; 关键字，那么以后这个类会越来越杂乱，这和之前没什么分别。&lt;/p&gt;
&lt;p&gt;较好的做法应该是把这个类叫做 GMClear，而且尽量调用方法的时候，让方法体内部的逻辑和现在的这个 App 本身没太大关系，把和现在的 App 有直接关系的部分作为参数，让使用者传参调用。&lt;/p&gt;
&lt;p&gt;这样下来，或许你可以在这个项目结束的时候，拥有几个可能叫 GMClear、GMSave、GMShare 的类，而且这些类里面的方法和你现在这个 App 没有太多直接联系，那么下一个项目用到这些东西，直接把代码文件复制过去就可以了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;&lt;p&gt;最近在重构一个以前写的老项目，在尝试给之前的 ViewController 减负，尽量抽离代码到其他文件。&lt;br&gt;想记录一些东西，看看以后返回来再看能不能有更好的想法；而现在，可以作为一个检验当前代码是否需要优化的一个标准。&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="iOS 开发" scheme="/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>实习求职终结篇</title>
    <link href="/2016/04/15/%E5%AE%9E%E4%B9%A0%E6%B1%82%E8%81%8C%E7%BB%88%E7%BB%93%E7%AF%87/"/>
    <id>/2016/04/15/实习求职终结篇/</id>
    <published>2016-04-15T14:01:39.000Z</published>
    <updated>2016-04-16T04:42:34.000Z</updated>
    
    <content type="html">&lt;p&gt;在和腾讯、阿里各通了4次电话之后，翘掉了腾讯的最后一面（因为是在隔壁的城市，而且是群面，心理上有点抗拒），拿到了阿里无线事业部的 offer，个人还是很满意，反过来记录一下整个过程，分享一下。&lt;/p&gt;
&lt;h2 id=&quot;做简历&quot;&gt;做简历&lt;/h2&gt;&lt;p&gt;大概2月底的时候，感觉到各大公司都开始有招聘的苗头了，了解到腾讯是3月底截止内推，其他公司也差不多。然后迅速撰写草稿，用一晚上的时间完成了简历的制作，虽然后来也修改了简历，但是第一版已经确定了 80% 的内容。这里面有一点要提一下，关于如何做简历（制作，不是简历的内容）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我个人的简历是“维护”了4个版本的：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个 txt 或者 rtf 用来放纯文本的信息，这是你的 PDF 版的简历的内容来源。因为无论用 pages 还是 word 还是其他工具来做简历，难免要有格式、图片等等其他元素，会影响到你撰写信息，所以需要有一个纯文本用来撰写信息，以此为数据源来更新你最终简历上的内容。&lt;/li&gt;
&lt;li&gt;一个 pages（或 word 等）文档，这是随时用来修改并且导出 PDF 版简历的。&lt;/li&gt;
&lt;li&gt;PDF 版简历，这个简历的命名要写好，可以写成【简历\&lt;em&gt;iOS开发实习\&lt;/em&gt;姓名】，这样任何时候需要简历，都可以直接发过去，命名可以让人一眼看出这是什么文件。&lt;/li&gt;
&lt;li&gt;一个 JPG 版本，虽然正式简历不该用图片，但是万一有机会在微信或者微博上发现有机会和别人私聊拿到工作机会，手机上是不能在微信和微博客户端发 PDF 的，所以这个也要准备好，而且要在清晰度高的同时保证文件不要太大，10M 的图片发出去都费劲。&lt;br&gt;（如果想参考的话，可以&lt;a href=&quot;https://github.com/OpenMarshall/MyResume/raw/master/%E7%AE%80%E5%8E%86_iOS%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0_%E5%BE%90%E5%BC%80%E6%BA%90.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击下载我的简历&lt;/a&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;找内推&quot;&gt;找内推&lt;/h2&gt;&lt;p&gt;在各个公司的内推期间，我拿到了腾讯、阿里、网易、蘑菇街4家的内推（京东也可以拿的，但是他们竟然不招 iOS 开发），而最终给我 offer 的阿里，帮我内推的人我压根就不认识，或许当初没有间接找人内推阿里，我现在连个机会都没有。&lt;/p&gt;
&lt;p&gt;所以想说，只要认真去联系一下，找一找中间人，其实联系上哪家公司的员工都不难。因为觉得自己不认识这家公司的人，就想不走内推流程或者干脆不去应聘，实在太可惜了。&lt;/p&gt;
&lt;h2 id=&quot;电面&quot;&gt;电面&lt;/h2&gt;&lt;p&gt;非常感谢腾讯的师兄，因为他的帮忙，我同时接到了手机 QQ 和微云两个部门的电面，所以按说只有两轮的电面，我接到了4次，涨了不少经验。之前的文章：&lt;br&gt;&lt;a href=&quot;http://kyxu.tech/2016/03/08/%E8%85%BE%E8%AE%AF-iOS-%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯 iOS 开发实习电话面试记录（一）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://kyxu.tech/2016/03/16/%E8%85%BE%E8%AE%AF-iOS-%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯 iOS 开发实习电话面试记录（二）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;阿里这边是手机淘宝部门，一路都很顺利，一面打了7分钟电话，都是简单问题（运气好重要），二面没聊技术（和我个人简历有关），三面是正规的技术面，四面HR是很普通的聊天。之前的文章：&lt;br&gt;&lt;a href=&quot;http://kyxu.tech/2016/03/19/%E9%98%BF%E9%87%8C-iOS-%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阿里 iOS 开发实习电话面试记录（一）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://kyxu.tech/2016/03/29/%E9%98%BF%E9%87%8C-iOS-%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阿里 iOS 开发实习电话面试记录（二）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里可以给的一点建议是：不要遇到答不出来的问题就一个字都不说，猜也好、临时分析也好，至少展现一点主动分析问题的状态。&lt;/p&gt;
&lt;h2 id=&quot;笔试&quot;&gt;笔试&lt;/h2&gt;&lt;p&gt;这里还是想吐槽一下，这些大公司都有些偷懒，笔试页面一看就是外包项目，感觉是建了一个题库，考试的时候直接从题库随机抽题目。&lt;/p&gt;
&lt;p&gt;笔试非常考验 CS 基础，数据库、操作系统、计算机网络、算法、C++ 的东西会的越多越好（实际上也确实是会的越多越好）。但是给客户端开发实习生同一套题目我实在是不服，有些 Android 题目给我做真是题都没看懂……&lt;/p&gt;
&lt;p&gt;不过趟基础也不是三两天可以搞定的，只能推荐个我个人觉得还不错的&lt;a href=&quot;http://www.nowcoder.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;刷题网站&lt;/a&gt;。还有就是，虽然在线笔试的网站监测作弊的手段并不强，还是劝想作弊的人不要这么干，抛开道德准则不说，万一出事，后果太严重了。&lt;/p&gt;
&lt;h2 id=&quot;寻求更多机会&quot;&gt;寻求更多机会&lt;/h2&gt;&lt;p&gt;虽然我给十多家小公司发了邮件没有收到任何回复，但是认为广投简历、对这些信息敏感一点总是好的。&lt;br&gt;在阿里四面之前，我就直接或间接地通过微博拿到了一家小公司（不便透露名称）的 offer 还有去饿了么做 React Native 的机会。&lt;br&gt;所以，主动一点吧～&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在和腾讯、阿里各通了4次电话之后，翘掉了腾讯的最后一面（因为是在隔壁的城市，而且是群面，心理上有点抗拒），拿到了阿里无线事业部的 offer，个人还是很满意，反过来记录一下整个过程，分享一下。&lt;/p&gt;
&lt;h2 id=&quot;做简历&quot;&gt;做简历&lt;/h2&gt;&lt;p&gt;大概2月底的时候，感觉到
    
    </summary>
    
    
      <category term="面试" scheme="/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>扯淡 Method Swizzling</title>
    <link href="/2016/04/06/%E6%89%AF%E6%B7%A1-Method-Swizzling/"/>
    <id>/2016/04/06/扯淡-Method-Swizzling/</id>
    <published>2016-04-06T03:11:29.000Z</published>
    <updated>2016-04-09T15:56:44.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;写在前面&quot;&gt;写在前面&lt;/h3&gt;&lt;p&gt;关于 Method Swizzling 这个东西，已经有很多高人写了详细的文章来介绍，我就不再班门弄斧，往深了说了。&lt;br&gt;而且不作延伸的话，这项技术本身也没有复杂到要长文论述的地步。&lt;br&gt;本文旨在帮助不熟悉这项技术的人，开始在实际开发过程中，尝试使用它。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;这是个啥&quot;&gt;这是个啥&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;swizz 这个词在英语里面是“欺骗”的意思。&lt;br&gt;Method Swizzling 也叫做“方法调配”、“方法混合”、“方法调和”，&lt;strong&gt;是用来互换两个方法的实现的技巧。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;这东西并不常用，比如我们用方法 A 实现了 a 这件事，方法 B 实现了 b 这件事，现在你非要用 A 实现 b，B 实现 a，即便技术上是可行的，你图个啥？回头再换回来你还记得不？再换第三次呢？&lt;/li&gt;
&lt;li&gt;那么什么时候可能需要用到这个东西呢？调试的时候。&lt;br&gt;如果方法 A、B 我都知道怎么实现的，那确实不用换。但是假如方法 A 的实现被隐藏了，那么我是不是可以用方法 B 调用方法 A，再顺便添加点别的功能，然后进行 A、B 实现 swizz。&lt;br&gt;这样再调用方法 A 的时候，就多了一点我们之前顺便添加的功能。&lt;br&gt;有人会说，你这有意思么，你直接调用方法 B 不就得了，为啥还要换？重点在于，方法 A 如何被调用可能不是我们可以决定的啊。或许这个方法已经在无数个地方被调用了无数次，那我想批量替换的话，当然就可以 swizz 了。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;举栗子&quot;&gt;举栗子&lt;/h3&gt;&lt;p&gt;比如说，在某个项目中，NSArray 实例的下面这个方法被调用了 N 多次&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;containsObject&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(anObject: AnyObject)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在我想调试一下，看看如果这个方法返回 true，即数组包含我们传入的元素的时候，这个元素在数据的什么位置（index）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;indexOfObject&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(anObject: AnyObject)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然直接调用上面这个方法就可以知道 index，但是 &lt;code&gt;containsObject&lt;/code&gt; 被使用了太多次，Xcode 现在又不支持 Swift 重构，懒得改了。那就写个新方法，给原方法加个可以输出 index 的功能，再用 swizz 替换一下两个方法的实现吧。&lt;/p&gt;
&lt;p&gt;这里我贴了完整的一个 demo 的代码，你可以直接粘到 Xcode 里面运行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; UIKit

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UIViewController&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()

        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr = &lt;span class=&quot;type&quot;&gt;NSArray&lt;/span&gt;(array: [&lt;span class=&quot;string&quot;&gt;&quot;Swift&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Method&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Swizzling&quot;&lt;/span&gt;])

        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;-----Swizzling 之前-----&quot;&lt;/span&gt;)
        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(arr.containsObject(&lt;span class=&quot;string&quot;&gt;&quot;Swift&quot;&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;

        &lt;span class=&quot;type&quot;&gt;NSArray&lt;/span&gt;.swizz() &lt;span class=&quot;comment&quot;&gt;// 方法互换&lt;/span&gt;

        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;-----Swizzling 之后-----&quot;&lt;/span&gt;)
        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(arr.containsObject(&lt;span class=&quot;string&quot;&gt;&quot;Swift&quot;&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// 先输出 index，再 true&lt;/span&gt;

        &lt;span class=&quot;type&quot;&gt;NSArray&lt;/span&gt;.swizz() &lt;span class=&quot;comment&quot;&gt;// 方法再换回来&lt;/span&gt;

        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;-----Swizzling 两下-----&quot;&lt;/span&gt;)
        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(arr.containsObject(&lt;span class=&quot;string&quot;&gt;&quot;Swift&quot;&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;
    }

}

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSArray&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;comment&quot;&gt;// 用来和默认方法进行替换的方法&lt;/span&gt;
    &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myContainsObject&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(anObject: AnyObject)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; {
        &lt;span class=&quot;comment&quot;&gt;// 输出元素的 index，这是默认的原方法不具有的功能&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.myContainsObject(anObject) {
            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;index：\\(self.indexOfObject(anObject))&quot;&lt;/span&gt;)
        }
        &lt;span class=&quot;comment&quot;&gt;// 不会产生死循环，因为运行期间，下面的方法已经被替换成了默认的 containsObject&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.myContainsObject(anObject)
    }

    &lt;span class=&quot;comment&quot;&gt;// 用来给不同方法互相替换的方法&lt;/span&gt;
    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swizz&lt;/span&gt;() &lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; originalMethod = class_getInstanceMethod(&lt;span class=&quot;type&quot;&gt;NSArray&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, #selector(containsObject(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;:)))
        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; swizzledMethod = class_getInstanceMethod(&lt;span class=&quot;type&quot;&gt;NSArray&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, #selector(myContainsObject(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;:)))
        method_exchangeImplementations(originalMethod, swizzledMethod)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/251884-7f3a68b6ef76a5af.png&quot; alt=&quot;console&quot;&gt;&lt;br&gt;【注意几点】&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这里我先后调用了三次 &lt;code&gt;containsObject&lt;/code&gt; 这个方法，其中第二次，它的内部实现被  &lt;code&gt;myContainsObject&lt;/code&gt; 这个方法的内部实现替换掉了。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;myContainsObject&lt;/code&gt; 这个方法乍一看是死循环，如果你直接调用它的话，它也确实是死循环。但现在我们是在 RunTime 期间，动态地决定这个方法的内部实现的，在我们调用这个方法，进入它的函数体的时候，它的实现就已经被换掉了，所以在它的内部，你应该把 &lt;code&gt;myContainsObject&lt;/code&gt; 这个词在你的脑子里换成 &lt;code&gt;containsObject&lt;/code&gt;（如果确定此时两个方法确实互换了实现）。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;最后&quot;&gt;最后&lt;/h3&gt;&lt;p&gt;如果我写的这点东西可以帮助你以后的 debug 工作，那么最好。&lt;br&gt;如果你要在实际项目里用它……你要是真能用上也挺厉害。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;写在前面&lt;/h3&gt;&lt;p&gt;关于 Method Swizzling 这个东西，已经有很多高人写了详细的文章来介绍，我就不再班门弄斧，往深了说了。&lt;br&gt;而且不作延伸的话，这项技术本身也没有复杂到要长文论述的地步。&lt;br&gt;本文旨在帮助不熟悉这项技术的人，开始
    
    </summary>
    
    
      <category term="iOS 开发" scheme="/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>阿里 iOS 开发实习电话面试记录（二）</title>
    <link href="/2016/03/29/%E9%98%BF%E9%87%8C-iOS-%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>/2016/03/29/阿里-iOS-开发实习电话面试记录（二）/</id>
    <published>2016-03-29T06:58:00.000Z</published>
    <updated>2016-04-09T15:57:20.000Z</updated>
    
    <content type="html">&lt;p&gt;iOS 客户端开发的三面。&lt;/p&gt;
&lt;p&gt;这次的面试官，一听他说话，年纪就不小了，感觉差不多也是个全栈。他问的 iOS 相关的问题我 90% 都答上来了，提到操作系统、计算机网络、算法之类的，我直说因为长期不投入实用，都忘了，他就说那就不问这方面的了，最后还劝告说，这些更多是方法论的东西，建议我学好，下面是他问了的 iOS 相关的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;（我在简历上写自己独立开发了几个 App）说一下你自己做的那个 App（随便挑了一个）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;（我大概阐述了产品方向之后，他问我技术上最难的是什么，然后随口提到了要保存图片到相册）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于 iOS 系统相册，有哪些相关方案可以获取？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以前的 AssetsLibrary 和现在的 Photos 框架都知道吗？&lt;br&gt;（我说了关于现在引入 Photos 和 PhotosUI 之后可以获取 LivePhoto 的问题）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;都熟悉哪些框架，有没有特别了解的？&lt;br&gt;（我说我熟悉 WebKit，然后他就问了我 GCD = =）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;（发现我会用 GCD 之后）能不能说一下底层？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;（我说我知道点 ARC 相关的底层实现，就说了一通，他很满意，这里要强烈推荐下面这本书）&lt;br&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/251884-7b1d63a98ab4148d.png&quot; alt=&quot;Objective-C 高级编程&quot;&gt;&lt;br&gt;同类型的问题还有 assign、weak 的区别，ARC 如何实现，编译时、运行时区别，weak 属性的对象在废弃后 指针是如何指向 nil 的……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;平时了解一些架构吗？&lt;br&gt;（我说我知道 MVC、MVVM。其他的光知道没用过，不敢拿出来装B）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;说一下 MVVM&lt;br&gt;（泪奔，难得在面试的时候能碰上自己很熟悉的，推荐不熟悉的看看最近挺火的文章&lt;a href=&quot;https://realm.io/cn/news/doios-natasha-murashev-protocol-oriented-mvvm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《面向协议的 MVVM 架构介绍》&lt;/a&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;知道 KVO、KVC 吗？&lt;br&gt;（虽然这个东西大家都在用，但是查一下还是能查出来一些自己不知道的，心里没底的，建议现在就去 Google 一下）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你平时做 App 之后，有什么推广途径？&lt;br&gt;（其中我提到了一些推广平台，国内的有 36Kr 的 &lt;a href=&quot;http://next.36kr.com/posts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NEXT&lt;/a&gt;、爱范儿的 &lt;a href=&quot;http://mindstore.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MindStore&lt;/a&gt; 和 &lt;a href=&quot;https://itunes.apple.com/app/id966457637&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AppSo&lt;/a&gt;，国外的有 &lt;a href=&quot;https://www.producthunt.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ProductHunt&lt;/a&gt;，好像他在听的时候还在一边拿笔记，人家也还在学习啊~）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 客户端开发的三面。&lt;/p&gt;
&lt;p&gt;这次的面试官，一听他说话，年纪就不小了，感觉差不多也是个全栈。他问的 iOS 相关的问题我 90% 都答上来了，提到操作系统、计算机网络、算法之类的，我直说因为长期不投入实用，都忘了，他就说那就不问这方面的了，最后还劝告说，这些更多
    
    </summary>
    
    
      <category term="面试" scheme="/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Swift Print 高级用法</title>
    <link href="/2016/03/27/Swift-Print-%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/"/>
    <id>/2016/03/27/Swift-Print-高级用法/</id>
    <published>2016-03-27T06:59:00.000Z</published>
    <updated>2016-04-09T15:57:44.000Z</updated>
    
    <content type="html">&lt;p&gt;这个东西不是我写的，&lt;a href=&quot;http://stackoverflow.com/questions/30865233/print-without-newline-in-swift-2-0/30865283#30865283&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;出自 StackOverFlow&lt;/a&gt;，但我觉得实在是写得太好了，于是截取了该部分分享出来，感谢原作者。&lt;br&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/251884-36ae85cb732a2b30.png&quot; alt=&quot;StackOverFlow&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这个东西不是我写的，&lt;a href=&quot;http://stackoverflow.com/questions/30865233/print-without-newline-in-swift-2-0/30865283#30865283&quot; target=&quot;_blank&quot; rel=
    
    </summary>
    
    
      <category term="iOS 开发" scheme="/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>阿里 iOS 开发实习电话面试记录（一）</title>
    <link href="/2016/03/19/%E9%98%BF%E9%87%8C-iOS-%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>/2016/03/19/阿里-iOS-开发实习电话面试记录（一）/</id>
    <published>2016-03-19T06:59:54.000Z</published>
    <updated>2016-04-09T07:12:13.000Z</updated>
    
    <content type="html">&lt;p&gt;写这篇文章的时候我已经接到阿里的两个电话了，只是因为可能他们安排的面试轮次比较多，所以打一次电话并没能说太多东西，攒了两次一起写。&lt;/p&gt;
&lt;h2 id=&quot;第一轮&quot;&gt;第一轮&lt;/h2&gt;&lt;p&gt;打了不到十分钟就结束了。都是问的所谓必考的那些基本题目：循环引用、检测内存泄露、TableView滑动卡顿解决方案等等，因为之前已经被腾讯虐了一波，这次对答如流，他就直说给过，等下一次电话。&lt;/p&gt;
&lt;h2 id=&quot;第二轮&quot;&gt;第二轮&lt;/h2&gt;&lt;p&gt;这个打了二十分钟，一个技术题没问。可能跟我简历写的有关系，我说独立做了几个 App，然后他让我自我介绍之后，问我是不是整个产品全部是独立做的，我说是，他就只问这个层面的东西了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;怎么想到要做这些东西的，idea 的来源？&lt;/li&gt;
&lt;li&gt;身边的人都在用吗？&lt;/li&gt;
&lt;li&gt;App 更新情况怎么样，通过什么来更新，怎么了解自己做的东西的缺陷？&lt;/li&gt;
&lt;li&gt;知不知道平时自己的东西活跃度怎么样，每天有多少人用？&lt;/li&gt;
&lt;li&gt;怎么推广自己的东西，推广渠道？除了你已经采用的这些渠道，再想点别的？&lt;/li&gt;
&lt;li&gt;你看淘宝客户端一般都是全五星评论，你怎么来让你的 App 在 AppStore 呈现好的评分？&lt;/li&gt;
&lt;li&gt;（之前谈到有些 App 因为产品思路不对的问题，做失败了）这些放弃了的 App 是哪里有问题？&lt;/li&gt;
&lt;li&gt;如果一定要拯救一下这些 App，你该怎么更新？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本就是这些问题，最后说我可以问他一个问题，我就问了一下招聘流程，然后他说每年都有小的变动，目前我也只能保证电话畅通了……&lt;/p&gt;
&lt;p&gt;目测后面的人要猛问技术问题了，Not Afraid。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;写这篇文章的时候我已经接到阿里的两个电话了，只是因为可能他们安排的面试轮次比较多，所以打一次电话并没能说太多东西，攒了两次一起写。&lt;/p&gt;
&lt;h2 id=&quot;第一轮&quot;&gt;第一轮&lt;/h2&gt;&lt;p&gt;打了不到十分钟就结束了。都是问的所谓必考的那些基本题目：循环引用、检测内存泄露、Tab
    
    </summary>
    
    
      <category term="面试" scheme="/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>腾讯 iOS 开发实习电话面试记录（二）</title>
    <link href="/2016/03/16/%E8%85%BE%E8%AE%AF-iOS-%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>/2016/03/16/腾讯-iOS-开发实习电话面试记录（二）/</id>
    <published>2016-03-16T07:04:28.000Z</published>
    <updated>2016-04-09T07:12:51.000Z</updated>
    
    <content type="html">&lt;p&gt;继上一篇文章&lt;a href=&quot;http://www.jianshu.com/p/8e8871a9677a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【面试】腾讯 iOS 开发实习电话面试记录（一）&lt;/a&gt;后，又接到了第二个电话，继续记录。根据回忆写的，问题先后可能不对。&lt;/p&gt;
&lt;p&gt;（一开始让我自我介绍一下，这一介绍，就说了我基本在用 Swift 而不是 OC 写正式项目，然后他就开始偏重 Swift 来问，也不知道是照顾我，还是怕我撒谎）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;说一下 C/C++ 里面变量定义和声明的区别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OC 里面的 property 有没有像 Swift 里面一样的 public 和 private 之分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我看你简历里面说你写过超过5万行 Swift，你怎么知道你写过 5 万行？&lt;br&gt;（我说可以通过 Terminal 来统计我的项目文件夹里面任意后缀文件的行数）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你这个5万行，包括第三方 API 吗？&lt;br&gt;（我说不包括，不过只要他问 Swift 少问 OC，我还是有信心）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你说一下你对 Swift 这门语言的理解，有什么和 C、C++ 或 OC 不同的地方？&lt;br&gt;（我说了关于 protocol 和 extension 相关的东西，还有关于 OC 里面的 NSString 浅复制，现在 Swift 对 String 类型是深复制，以及 Swift 对这个值拷贝的优化的问题……会的东西还是要多说）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;平时你对你上架的这些产品是怎么监测崩溃情况的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;平时怎么检测内存泄露，有什么解决方案&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TableView 滑动卡顿有什么优化方案&lt;br&gt;（这个因为刚好在面试之前还准备了一下，噼里啪啦说了好多，可能还说了点面试官不知道的东西。然后他说你怎么知道这些东西的，平时都在用吗，我说都是在网上看的，因为平时没有做过非常复杂的 Cell，所以实际应用起来了的优化手段并不多）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;说一下 HTTP 协议&lt;br&gt;（我说不会，就简单说了下 http 和 https 的区别，和 iOS 9 开始引导访问 https 的问题，大家可以背一下这一段：&lt;strong&gt;【为了强制增强数据访问安全， iOS9 默认会把所有从&lt;code&gt;NSURLConnection&lt;/code&gt; 、 &lt;code&gt;CFURL&lt;/code&gt; 、 &lt;code&gt;NSURLSession&lt;/code&gt;发出的 HTTP 请求，都改为 HTTPS 请求：iOS9.x-SDK编译时，默认会让所有从&lt;code&gt;NSURLConnection&lt;/code&gt; 、 &lt;code&gt;CFURL&lt;/code&gt; 、 &lt;code&gt;NSURLSession&lt;/code&gt;发出的 HTTP 请求统一采用 TLS 1.2（SSL 3.1） 协议。】&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;说一下你最复杂的一个项目的技术内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你所有项目都是你独立开发完成的吗，包括切图、UI&lt;br&gt;（我说是，不过他也没问我 Photoshop，就此作罢）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;说一下不同版本 iPhone 的分辨率&lt;br&gt;（我说我没背下来那个 320*568 什么的分辨率，但我知道硬件屏幕上 dot 的数量和软件屏幕 pixel 数量的关系，而且很特殊的一点是，虽然 iPhone 3GS 对应的是 1x，iPhone 4S 开始对应 2x，但是 iPhone 6+ 对应的所谓 3x 实际上是 1：2.6几，Apple 帮我们做了把 3x 的图做成 2.6x 的这个工作）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你平时是怎么做技术积累的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;好像电话面试就此结束了，下次面试是面试官来本地走校招流程，然后之前打过电话、简历评级够好的，现场面试的时候会比较容易给 offer。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;继上一篇文章&lt;a href=&quot;http://www.jianshu.com/p/8e8871a9677a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【面试】腾讯 iOS 开发实习电话面试记录（一）&lt;/a&gt;后，又接到了第二个电话，继续记录。根据回忆写的，
    
    </summary>
    
    
      <category term="面试" scheme="/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Adobe Xd 简明教程 &lt;对比 Sketch&gt;</title>
    <link href="/2016/03/16/Adobe-Xd-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B-%E5%AF%B9%E6%AF%94-Sketch/"/>
    <id>/2016/03/16/Adobe-Xd-简明教程-对比-Sketch/</id>
    <published>2016-03-16T07:02:32.000Z</published>
    <updated>2016-04-09T16:04:59.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;写在前面&quot;&gt;写在前面&lt;/h1&gt;&lt;p&gt;本人在学了一年半平面设计之后（苦于不会画画，只会用软件，没做出个啥东西来），转做的 iOS 开发，算是能写点新手教程，如果您是职业设计师，就别对这篇文章抱太大希望啦。如果你是不会做 UI 的程序员（做 iOS 开发的最好），希望你能有所收获。&lt;/p&gt;
&lt;p&gt;如果你还没装上 Adobe Xd，鉴于现在的 Xd 预览版并不收费，而国内的网络环境又实在不利于我等从 Adobe 官网装那个 Creative Cloud Desktop，我传了一份到&lt;a href=&quot;http://yun.baidu.com/share/link?shareid=3274616498&amp;amp;uk=2097307015&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度盘&lt;/a&gt;，戳链接下载吧。如果用不了的话，里面还有一份 Creative Cloud Installer，装上 Creative Cloud Desktop 之后，可以在线安装 Xd。Sketch 是收费软件，就不给地址了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/251884-e6dbe297c846ad7b.png&quot; alt=&quot;这阵容！&quot;&gt;&lt;/p&gt;
&lt;p&gt;在那个没有 Sketch 的年代，Photoshop 作为图像处理软件之王，横行了很久。Sketch 出现之后呢，虽然 Photoshop 依然在横行，但是在 UI 这个领域，至少被 Sketch 冲击地不轻。而 Photoshop 有自己的产品定位，就是做综合功能最强大的 CG 软件（实际上它也确实做到了），不能为了 Sketch 而改掉自己。&lt;strong&gt;等了好久终于等到今天！Adobe 出了一款和 Sketch 定位一模一样的产品 —— Adobe Xd！&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;基础&quot;&gt;基础&lt;/h1&gt;&lt;p&gt;如果您已经会用 Sketch 的话，那是最好，如果是不会做 UI 的程序员的话……快去学一下噻（也只能凑合着看啦）&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/251884-907915cdb210cd36.png&quot; alt=&quot;Sketch &amp;amp; Xd&quot;&gt;&lt;br&gt;如图，左边是 Sketch，右边是 Xd，我分别加入了一个初始的 iPhone 6 大小的 Artboard，别说两边界面基本一样，就连用词都没差。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/251884-cc71589e434133e5.png&quot; alt=&quot;Sketch Insert&quot;&gt;&lt;br&gt;Sketch 把插入新元素这个功能放到了 Insert 里面，平时使用基本都是用快捷键的，虽然 Xd 也支持用快捷键来调用这些工具，但是默认左边还有个边栏一直放在这，和 Photoshop 如出一辙，要知道 Xd 的工具比 Photoshop 少的不是一点半点啊，个人感觉这个栏有点鸡肋。&lt;br&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/251884-84745362c36c3019.png&quot; alt=&quot;Xd 左栏&quot;&gt;&lt;br&gt;而 Sketch 那个丰富的顶部工具栏，在 Xd 里面被分拆了。如 Union、Subtract 等布尔运算，被放到了右侧栏，Mask、Group 等功能，放到了软件的顶部菜单栏里面，这使得 Xd 看起来更简洁一些。不过无所谓，在两个软件里，这些功能都可以用快捷键使用。&lt;br&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/251884-c2984ebd38dab1b4.png&quot; alt=&quot;Sketch 顶部工具栏&quot;&gt;&lt;br&gt;那么 Xd 的顶部放了什么呢&lt;br&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/251884-ae4cceed563422d2.png&quot; alt=&quot;Xd Prototype&quot;&gt;&lt;br&gt;通过这个入口，加入了做原型的功能！一看就明了，有木有！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/251884-a54c9d717608162a.png&quot; alt=&quot;Xd Prototype&quot;&gt;&lt;br&gt;如果你是做 iOS 开发的，这些 Segue、Easing、Duration、TARGET 的用词，不能再熟悉了，对开发人员不能再友好。&lt;/p&gt;
&lt;p&gt;回到 Xd 的 Design 这个地方，我发现缺少了 Sketch 左边那个图层管理的列表，还是有些别扭。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/251884-6390d788d164d403.png&quot; alt=&quot;一个较为复杂的 Sketch 项目&quot;&gt;&lt;/p&gt;
&lt;p&gt;比如对于上面这个界面，如果没有左边这个管理界面的话，而如果这个东西又是别人做的，我必须要逐个点击才知道谁和谁是一组的，就很麻烦。而且在 Xd 里面，不导出，你是不知道某一个图层的名字的。&lt;br&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/251884-76e65022be7f405a.png&quot; alt=&quot;Xd Export&quot;&gt;&lt;br&gt;比如这么一个圆形，虽然导出的时候我可以更改它的命名，但是如果我有20个不同的圆，我可能会希望先全部命名好，再批量导出。&lt;/p&gt;
&lt;p&gt;不过在导出的时候，除了文件命名这个事情之外，有一个地方 Xd 做的非常棒，那就是自动生成 1x、2x、3x 等不同尺寸。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/251884-28f74ff40fd51eb1.png&quot; alt=&quot;Xd Export&quot;&gt;&lt;br&gt;虽然在 Sketch 里面我们可以给每一个图层加一个 Slice，再给 Slice 设定导出的 1x、2x、3x，还是没有 Xd 的这个解决方案好。针对 Android，Xd 也给了相应的从 ldpi 到 xxxhdpi 的六种规格。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/251884-f1227259089e931e.png&quot; alt=&quot;Sketch Slice&quot;&gt;&lt;br&gt;当然也不是说 Sketch 的 Slice 就一无是处，繁琐的东西它当然就自定义程度高一些。比如我们做了一个圆形，要导出一个左半圆和右半圆，那当然用 Slice 要方便的多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;除此之外，Sketch 还有安装插件的功能，也凭借先发优势积累了大量的资源和论坛内容。不知道可以做原型的 Xd 和它的好爸爸 Adobe，能不能有机会一举杀入 Sketch 的阵地。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;&lt;p&gt;因为我个人平时不做原型，对这个要求不高，所以现在 Xd 做原型的功能对我来说，简单、够用。&lt;br&gt;假设原型工具占了产品界面设计过程的 20%，那么 Adobe 可能会希望把以前的 PS + Sketch = 80% 的情况，变成 PS + Xd = 100% 吧。&lt;br&gt;就目前工作来说，我会尝试开始用 Xd，遇到个别情况，Xd 不顺手的话，会打开 Sketch，两把刷子一起用，等时间长了，哪个更适合我就有概念了。相当长的一段时间内，我是不会删掉 Sketch 的，就凭那些优质的 Sketch 资源，我也不会删。&lt;br&gt;于个人喜好，虽然我忠爱 Adobe，但垄断总是不好的，Sketch 坚挺住啊！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面&quot;&gt;写在前面&lt;/h1&gt;&lt;p&gt;本人在学了一年半平面设计之后（苦于不会画画，只会用软件，没做出个啥东西来），转做的 iOS 开发，算是能写点新手教程，如果您是职业设计师，就别对这篇文章抱太大希望啦。如果你是不会做 UI 的程序员（做 iOS 开发的最好），希望
    
    </summary>
    
    
      <category term="设计" scheme="/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>在你的 App 中使用《一拳超人》背景色</title>
    <link href="/2016/03/14/%E5%9C%A8%E4%BD%A0%E7%9A%84-App-%E4%B8%AD%E4%BD%BF%E7%94%A8%E3%80%8A%E4%B8%80%E6%8B%B3%E8%B6%85%E4%BA%BA%E3%80%8B%E8%83%8C%E6%99%AF%E8%89%B2/"/>
    <id>/2016/03/14/在你的-App-中使用《一拳超人》背景色/</id>
    <published>2016-03-14T07:05:32.000Z</published>
    <updated>2016-04-09T16:07:12.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/opc.gif&quot; alt=&quot;OnePunchColor.gif&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;这是_Github_项目地址&quot;&gt;&lt;a href=&quot;https://github.com/OpenMarshall/OnePunchColor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这是 Github 项目地址&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;br&gt;我从《一拳超人》动画中吸取了22种和白色非常匹配的颜色，现在你可以通过 &lt;code&gt;UIColor&lt;/code&gt; 或者 &lt;code&gt;UIView&lt;/code&gt; 来通过一行代码调用这些颜色。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;// quick version&lt;/span&gt;
self&lt;span class=&quot;class&quot;&gt;.view&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.punch&lt;/span&gt;()

&lt;span class=&quot;comment&quot;&gt;// slow version&lt;/span&gt;
self&lt;span class=&quot;class&quot;&gt;.view&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.punchWithInterval&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)

&lt;span class=&quot;comment&quot;&gt;// complete version&lt;/span&gt;
self&lt;span class=&quot;class&quot;&gt;.view&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.backgroundColor&lt;/span&gt; = UIColor.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;onePunchColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;AppStore_上的这个_App_应用了这段代码&quot;&gt;&lt;a href=&quot;https://itunes.apple.com/app/id1078241816&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AppStore 上的这个 App&lt;/a&gt; 应用了这段代码&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/opc.gif&quot; alt=&quot;OnePunchColor.gif&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;这是_Github_项目地址&quot;&gt;&lt;a href=&quot;https://github.com
    
    </summary>
    
    
      <category term="开源" scheme="/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>伪造一个 SFSafariViewController</title>
    <link href="/2016/03/13/%E4%BC%AA%E9%80%A0%E4%B8%80%E4%B8%AA-SFSafariViewController/"/>
    <id>/2016/03/13/伪造一个-SFSafariViewController/</id>
    <published>2016-03-13T07:06:54.000Z</published>
    <updated>2016-04-09T07:07:18.000Z</updated>
    
    <content type="html">&lt;p&gt;iOS 9 中的 SFSafariViewController 可以使我们非常方便的传入一个 url 来展示一个网页，调用起来是下面这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let safari = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;SFSafariViewController&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(URL: url)&lt;/span&gt;&lt;/span&gt;
self.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;presentViewController&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(safari, animated: true, completion: nil)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里我尝试给出一个简化版（仅仅展示网页，没有其他功能）的 SFSafariViewController，来方便地在 iOS 9 以下的系统中调用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; UIKit
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; WebKit

&lt;span class=&quot;comment&quot;&gt;// 如果用户使用 iOS 8，则没有 SFSafariViewController，用这个 VC 来加载一个网页&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FakeSafariViewController&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UIViewController&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url:&lt;span class=&quot;type&quot;&gt;NSURL&lt;/span&gt;!
    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; webview = &lt;span class=&quot;type&quot;&gt;WKWebView&lt;/span&gt;()


    &lt;span class=&quot;comment&quot;&gt;// MARK: - Init&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;convenience&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;URL&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;NSURL&lt;/span&gt;) {
        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;()
        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.url = &lt;span class=&quot;type&quot;&gt;URL&lt;/span&gt;
    }



    &lt;span class=&quot;comment&quot;&gt;// MARK: - Main&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()

        &lt;span class=&quot;comment&quot;&gt;// webview&lt;/span&gt;
        webview.frame = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.frame
        webview.loadRequest(&lt;span class=&quot;type&quot;&gt;NSURLRequest&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;URL&lt;/span&gt;: url))
        view.addSubview(webview)

        &lt;span class=&quot;comment&quot;&gt;// 屏幕旋转监听&lt;/span&gt;
        &lt;span class=&quot;type&quot;&gt;NSNotificationCenter&lt;/span&gt;.defaultCenter().addObserver(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, selector: &lt;span class=&quot;string&quot;&gt;&quot;screenRotate:&quot;&lt;/span&gt;,
            name: &lt;span class=&quot;type&quot;&gt;UIDeviceOrientationDidChangeNotification&lt;/span&gt;, object: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)
    }

    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;didReceiveMemoryWarning&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.didReceiveMemoryWarning()
    }

    &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;screenRotate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(notification:NSNotification)&lt;/span&gt;&lt;/span&gt; {
        webview.frame = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.frame
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调用时，表现起来和 SFSafariViewController 是一样的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let realSafari = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;SFSafariViewController&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(URL: url)&lt;/span&gt;&lt;/span&gt;
let fakeSafari = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;FakeSafariViewController&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(URL: url)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然，如果如果你要在 iOS 8 以下的环境中使用的话，把 WKWebView 换成 UIWebView 就好了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;【Github】&lt;a href=&quot;https://github.com/OpenMarshall/SwiftGG/blob/master/SwiftGG/FakeSafariVC.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这段代码&lt;/a&gt;出现在了&lt;a href=&quot;https://github.com/OpenMarshall/SwiftGG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; SwiftGG 项目&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 9 中的 SFSafariViewController 可以使我们非常方便的传入一个 url 来展示一个网页，调用起来是下面这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let safari = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;tit
    
    </summary>
    
    
      <category term="iOS 开发" scheme="/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用 protocol 与 extension 来限制函数作用域</title>
    <link href="/2016/03/12/%E4%BD%BF%E7%94%A8-protocol-%E4%B8%8E-extension-%E6%9D%A5%E9%99%90%E5%88%B6%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>/2016/03/12/使用-protocol-与-extension-来限制函数作用域/</id>
    <published>2016-03-12T07:07:31.000Z</published>
    <updated>2016-04-09T07:12:44.000Z</updated>
    
    <content type="html">&lt;p&gt;今天碰到这样一个场景，我需要一个仅仅用来展示网页的页面，那么在 iOS 9 中，我可以使用 SFSafariViewController，而在 iOS 8 及之前版本中，我会使用一个 WebView 来占据整个视图空间，来做这件事。&lt;/p&gt;
&lt;p&gt;就会有下面这行代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;webview&lt;span class=&quot;class&quot;&gt;.frame&lt;/span&gt; = UIScreen.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;mainScreen&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;.bounds
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;进一步地，我想把这个步骤封装为一个函数，因为比如这个页面屏幕旋转时，或者在其他页面，我都可能需要用到它。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;component&quot;&gt;func expandView(view:UIView) {
    if view&lt;span class=&quot;string&quot;&gt;.isKindOfClass(UIWebView)&lt;/span&gt; || view&lt;span class=&quot;string&quot;&gt;.isKindOfClass(WKWebView)&lt;/span&gt; {
        view&lt;span class=&quot;string&quot;&gt;.frame&lt;/span&gt; = UIScreen&lt;span class=&quot;string&quot;&gt;.mainScreen().bounds&lt;/span&gt;
    }&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段代码是说，我们现在可以把 UIWebView 和 WKWebView 都扩展到最大了，其他 UIView 被传入的时候，不会有任何意义。但这不是我想要的，我希望其他 UIView 根本无法调用这个函数，以免产生误解。&lt;/p&gt;
&lt;p&gt;于是我写了下面这段代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExpandableView&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;expandToFullView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
}

&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(view:UIView)&lt;/span&gt;&lt;/span&gt; {
    view.frame = &lt;span class=&quot;type&quot;&gt;UIScreen&lt;/span&gt;.mainScreen().bounds
}

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WKWebView&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;ExpandableView&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;expandToFullView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; { expand(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) }
}

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIWebView&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;ExpandableView&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;expandToFullView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; { expand(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在，UIWebView 和 WKWebView 都可以通过 ExpandableView 这个协议，来使用我们定义好的（具有扩展一个 View 到整个界面大小这层意义的） expandToFullView 这个函数，而且因为这个函数的实现实际上是 expand 这个函数，所以他们表现起来是一样的。与此同时，expand 这个函数本身被声明为了 private，这使得这个函数不会在其他源文件以其他方式被调用。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这段代码被应用在了 &lt;a href=&quot;https://github.com/OpenMarshall/SwiftGG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个项目&lt;/a&gt; 的 &lt;a href=&quot;https://github.com/OpenMarshall/SwiftGG/blob/master/SwiftGG/WebviewExtension.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个文件&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天碰到这样一个场景，我需要一个仅仅用来展示网页的页面，那么在 iOS 9 中，我可以使用 SFSafariViewController，而在 iOS 8 及之前版本中，我会使用一个 WebView 来占据整个视图空间，来做这件事。&lt;/p&gt;
&lt;p&gt;就会有下面这行代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS 开发" scheme="/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>我用 JS 抓了 SwiftGG，做了个客户端</title>
    <link href="/2016/03/11/%E6%88%91%E7%94%A8-JS-%E6%8A%93%E4%BA%86-SwiftGG%EF%BC%8C%E5%81%9A%E4%BA%86%E4%B8%AA%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>/2016/03/11/我用-JS-抓了-SwiftGG，做了个客户端/</id>
    <published>2016-03-11T07:08:48.000Z</published>
    <updated>2016-04-09T16:06:58.000Z</updated>
    
    <content type="html">&lt;p&gt;我用 Javascript 抓取了 &lt;a href=&quot;http://swift.gg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SwiftGG 网站&lt;/a&gt;，做了一个简易的客户端，方便大家查看上面的文章。&lt;/p&gt;
&lt;p&gt;这是 &lt;a href=&quot;https://github.com/OpenMarshall/SwiftGG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github 地址&lt;/a&gt;，欢迎大家随手 Star。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/gg1.jpg&quot; alt=&quot;ScreenShot1&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/gg2.jpg&quot; alt=&quot;ScreenShot2&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我用 Javascript 抓取了 &lt;a href=&quot;http://swift.gg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SwiftGG 网站&lt;/a&gt;，做了一个简易的客户端，方便大家查看上面的文章。&lt;/p&gt;
&lt;p&gt;这是 &lt;a href=&quot;http
    
    </summary>
    
    
      <category term="开源" scheme="/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>腾讯 iOS 开发实习电话面试记录（一）</title>
    <link href="/2016/03/08/%E8%85%BE%E8%AE%AF-iOS-%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>/2016/03/08/腾讯-iOS-开发实习电话面试记录（一）/</id>
    <published>2016-03-08T07:09:35.000Z</published>
    <updated>2016-04-09T07:16:12.000Z</updated>
    
    <content type="html">&lt;p&gt;目前大三，准备暑假去腾讯做 iOS 开发实习，昨天接到了电话面试，（应该是那个部门的 iOS 开发组组长打来的，我也不确定），来分享一下他问的那些题目。&lt;/p&gt;
&lt;p&gt;感觉他提问是按照我写的简历来问的，而且考虑到我是准备去做实习生，也可能问的相对简单，我根据回忆写一下，大家就凑合着看吧。&lt;/p&gt;
&lt;p&gt;1.我看你也上线了几个项目，说一下你做过的这些东西，工程体量大概都是多大，代码有多少行？&lt;br&gt;（我说多的有五六千行，少的就一千行）&lt;/p&gt;
&lt;p&gt;2.你那个五六千行的项目是干嘛的？&lt;br&gt;（一个招聘会信息聚合应用）&lt;/p&gt;
&lt;p&gt;3.这个项目用户量有多少？&lt;br&gt;（我说这个项目没多少用户，我个人用户最多是项目是 &lt;a href=&quot;https://itunes.apple.com/app/id1028844347&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gif Master&lt;/a&gt;，然后提到了用户量）&lt;/p&gt;
&lt;p&gt;4.你怎么知道你这个 App 有多少活跃用户的？用的友盟吗？&lt;br&gt;（我说我用 Flurry，通过 App 更新情况也能看出来）&lt;/p&gt;
&lt;p&gt;5.那你跟我说说你这个 Gif Master 是干嘛的？&lt;br&gt;（……说了一堆，其中重点是提到了，可以把某一条微博作为网页提出来，然后抓取这个网页中的 Gif 图，再分享到微信）&lt;/p&gt;
&lt;p&gt;6.你是怎么把这个 Gif 图从微博上抓下来的？&lt;br&gt;（因为是用的从 Github 上找到的一个现成的方法，所以我并不清楚具体的技术细节，就只说了是把整个图片作为 NSData 提取出来的）&lt;/p&gt;
&lt;p&gt;7.你是怎么把图片分享到微信的？&lt;br&gt;（用的是 mob 的 SDK，不只是分享到微信，还能分享到 QQ 和微博。因为微信原生不支持 Gif，所以是做为表情分享过去的）&lt;/p&gt;
&lt;p&gt;8.你统计过你这个 App 的 Crash 情况吗？&lt;br&gt;（我说我在用雅虎的 Flurry 平台，这里面有非常详细的数据。但是实话实话，我并没有详细地监测用户如何触发了 crash，而更多地是自己不断地试用，然后解决问题。）&lt;/p&gt;
&lt;p&gt;9.你是如何监测这个 App 的内存情况的，以及如何处理内容泄露？&lt;/p&gt;
&lt;p&gt;10.平时用过 WebView 吗，你在用的时候除了单纯地用它加载网页，还用过其他的吗？&lt;br&gt;（我说用过 JS 交互）&lt;/p&gt;
&lt;p&gt;11.（这里忘了他问了啥了，但是我觉得总要说点东西，而且我确实经常用 WebView，就说了下 UIWebView 和 WKWebView 在 JS 交互上的区别）&lt;/p&gt;
&lt;p&gt;12.说一下你自己理解的 RunTime&lt;/p&gt;
&lt;p&gt;13.知道 RunLoop 吗？&lt;br&gt;（我只在 NSTimer 里面用过，所以知道这个东西，但不是很了解，就实话实说了，然后他继续问细节，我算是说出来了一半，就下一个问题了）&lt;/p&gt;
&lt;p&gt;14.Objective-C 里面 property 写成 assign 和 weak 的区别？&lt;br&gt;（这里还说了一下 weak 解决循环引用的问题）&lt;/p&gt;
&lt;p&gt;15.知道 STL 吗（问了 List 和 Vector）&lt;/p&gt;
&lt;p&gt;16.用过 TableView 吗，平时怎么解决 TableView 滑动卡顿问题的？&lt;/p&gt;
&lt;p&gt;17.懂网络方面的问题吗？TCP/IP 三次握手？&lt;br&gt;（我说不知道，就仅仅是平时与服务器交互用过 get post）&lt;/p&gt;
&lt;p&gt;18.说一下 get post 的区别？&lt;br&gt;（我说出来了，这时候已经开始感觉到这个人什么都会，就算他问的问题你不知道，也要随便说点相关的自己知道的，因为他一定可以把这个问题无限延伸下去）&lt;/p&gt;
&lt;p&gt;19.你写过这么多代码了，知道设计模式吗？&lt;br&gt;（我说知道 MVC 和 MVVM，然后他让我说一下单例模式 - 显然仅仅会用是不够的，这题我算答出来一半）&lt;/p&gt;
&lt;p&gt;20.知道观察者吗？&lt;br&gt;（监听事件那个 observer 嘛，这个我还是非常熟悉）&lt;/p&gt;
&lt;p&gt;21.知道本地存储吗？&lt;br&gt;（这个我也非常熟悉，巴拉巴拉说了一堆 NSUserDefaults、Plist，还有如何存储自定义类型的问题，然后他说你知道 NSUserDefaults 本质上也是用 Plist 存储的吗，我诚实地说不知道，他又说除此之外其实还有 keychain 存储的方法，我也诚实的说我知道这种方法，但我自己没用过）&lt;/p&gt;
&lt;p&gt;22.你发布的那些 App 都是自己独立完成的吗？&lt;br&gt;（我说是，但是他可能怕我撒谎，还要继续问一下）&lt;/p&gt;
&lt;p&gt;23.说一下你平时发布 App 的流程&lt;/p&gt;
&lt;p&gt;24.是你自己买的开发者账号吗？有 iPhone 吗？&lt;br&gt;（of course~）&lt;/p&gt;
&lt;p&gt;25.是怎么想到要做 iOS 或者 Android 开发这个行当的？&lt;br&gt;（我说了我的心路历程  = = ）&lt;/p&gt;
&lt;p&gt;26.会用 C++ 吗？&lt;br&gt;（我说我学了，但是没在实际项目中用过）&lt;/p&gt;
&lt;p&gt;27.C++ 里面传递一个引用和传递一个指针有什么区别？&lt;br&gt;（其实我是知道的，但是当时懵逼了，瞎说了一通，大概是说错了）&lt;/p&gt;
&lt;p&gt;28.问了多线程、主线程阻塞、UI 更新、异步这一块的问题&lt;/p&gt;
&lt;p&gt;29.全剧终，他说过两天还要再有人给我打电话，所以我感觉应该第一关是过了，据说下一面是总监面，如果顺利通过的话，再来写第二篇&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;目前大三，准备暑假去腾讯做 iOS 开发实习，昨天接到了电话面试，（应该是那个部门的 iOS 开发组组长打来的，我也不确定），来分享一下他问的那些题目。&lt;/p&gt;
&lt;p&gt;感觉他提问是按照我写的简历来问的，而且考虑到我是准备去做实习生，也可能问的相对简单，我根据回忆写一下，大家
    
    </summary>
    
    
      <category term="面试" scheme="/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>两个函数搞定本地存储</title>
    <link href="/2016/02/29/%E4%B8%A4%E4%B8%AA%E5%87%BD%E6%95%B0%E6%90%9E%E5%AE%9A%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    <id>/2016/02/29/两个函数搞定本地存储/</id>
    <published>2016-02-29T07:10:22.000Z</published>
    <updated>2016-04-10T06:08:04.000Z</updated>
    
    <content type="html">&lt;p&gt;平时我们经常会采用  NSUserDefaults 或者 Plist 来存储数据到设备，这样即使 App 被关闭，下次再打开的时候数据还在。这里我写了两个函数来供大家使用，一个用来存数据，一个用来读数据。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;// MARK: - Store&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StoreType&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; userDefaults
    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; plist
}

&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setContentToDevice&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(content:AnyObject, key:String, type:StoreType)&lt;/span&gt;&lt;/span&gt; {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; type == .userDefaults {
        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; defaults = &lt;span class=&quot;type&quot;&gt;NSUserDefaults&lt;/span&gt;.standardUserDefaults()
        defaults.setObject(content, forKey: key)
        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Set - UserDefaults&quot;&lt;/span&gt;)
    }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; type == .plist {
        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pathPrefix = &lt;span class=&quot;type&quot;&gt;NSSearchPathForDirectoriesInDomains&lt;/span&gt;(
            &lt;span class=&quot;type&quot;&gt;NSSearchPathDirectory&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;DocumentDirectory&lt;/span&gt;,
            &lt;span class=&quot;type&quot;&gt;NSSearchPathDomainMask&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;AllDomainsMask&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;).first
        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pathSuffix = &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; + key + &lt;span class=&quot;string&quot;&gt;&quot;.plist&quot;&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; path = pathPrefix?.stringByAppendingString(pathSuffix) {
            &lt;span class=&quot;type&quot;&gt;NSKeyedArchiver&lt;/span&gt;.archiveRootObject(content, toFile: path)
            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Set - Plist&quot;&lt;/span&gt;)
        }
    }
}

&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getContentFromDevice&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(key:String, type:StoreType)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;AnyObject&lt;/span&gt;? {
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; returnObject :&lt;span class=&quot;type&quot;&gt;AnyObject&lt;/span&gt;?

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; type == .userDefaults {
        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; defaults = &lt;span class=&quot;type&quot;&gt;NSUserDefaults&lt;/span&gt;.standardUserDefaults()
        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; content = defaults.objectForKey(key)
        returnObject = content
        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Get - UserDefaults&quot;&lt;/span&gt;)
    }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; type == .plist {
        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pathPrefix = &lt;span class=&quot;type&quot;&gt;NSSearchPathForDirectoriesInDomains&lt;/span&gt;(
            &lt;span class=&quot;type&quot;&gt;NSSearchPathDirectory&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;DocumentDirectory&lt;/span&gt;,
            &lt;span class=&quot;type&quot;&gt;NSSearchPathDomainMask&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;AllDomainsMask&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;).first
        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pathSuffix = &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; + key + &lt;span class=&quot;string&quot;&gt;&quot;.plist&quot;&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; path = pathPrefix?.stringByAppendingString(pathSuffix) {
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; content = &lt;span class=&quot;type&quot;&gt;NSKeyedUnarchiver&lt;/span&gt;.unarchiveObjectWithFile(path) {
                returnObject = content
                &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Get - Plist&quot;&lt;/span&gt;)
            }
        }
    }

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; returnObject
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数名和参数名都一看便知是什么意思，只要你存取数据都用的是同一个 Key，就可以操作同一份数据。&lt;/p&gt;
&lt;p&gt;这里多提供了一个 type 选项来选择通过 NSUserDefaults 或者 Plist 来存储数据。&lt;strong&gt;但是要注意，在这里 NSUserDefaults 只支持存储 NSArray、NSString 等基本类型，如果你要存储自定义类型的实例，必须使用 StoreType.plist 进行存储。此外，这个类还必须进行微小的改动，这部分可以参考&lt;a href=&quot;http://www.jianshu.com/p/3a82f42de5fb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我之前写的一篇文章&lt;/a&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面给出使用这个函数的范例：（其中 Hero 是我自定义的类）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]
setContentToDevice(arr, key: &lt;span class=&quot;string&quot;&gt;&quot;testArr&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;: .userDefaults)

&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ironMan = &lt;span class=&quot;type&quot;&gt;Hero&lt;/span&gt;(name: &lt;span class=&quot;string&quot;&gt;&quot;Tony Stark&quot;&lt;/span&gt;)
setContentToDevice(ironMan, key: &lt;span class=&quot;string&quot;&gt;&quot;testHero&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;: .plist)

&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; = getContentFromDevice(&lt;span class=&quot;string&quot;&gt;&quot;testArr&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;: .userDefaults) {
    print(&lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;)
}

&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; = getContentFromDevice(&lt;span class=&quot;string&quot;&gt;&quot;testHero&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;: .plist) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;Hero&lt;/span&gt; {
    print(&lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;.name)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/bendicunchu.png&quot; alt=&quot;控制台输出&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;防止有人懒得看我之前写的那篇文章，把 Hero Class 这部分代码也贴出来&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; UIKit

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hero&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name:&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(name:&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) {
        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.name = name
        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;()
    }

    &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;encodeWithCoder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(aCoder: NSCoder!)&lt;/span&gt;&lt;/span&gt; {
        aCoder.encodeObject(name, forKey: &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;)
    }

    &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(coder aDecoder: &lt;span class=&quot;type&quot;&gt;NSCoder&lt;/span&gt;!) {
        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.name = aDecoder.decodeObjectForKey(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/OpenMarshall/StoreFunctions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这是完整项目 Github 地址&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;平时我们经常会采用  NSUserDefaults 或者 Plist 来存储数据到设备，这样即使 App 被关闭，下次再打开的时候数据还在。这里我写了两个函数来供大家使用，一个用来存数据，一个用来读数据。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;commen
    
    </summary>
    
    
      <category term="iOS 开发" scheme="/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>发布 Widget App 注意事项</title>
    <link href="/2016/02/18/%E5%8F%91%E5%B8%83-Widget-App-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>/2016/02/18/发布-Widget-App-注意事项/</id>
    <published>2016-02-18T07:16:49.000Z</published>
    <updated>2016-04-09T07:19:25.000Z</updated>
    
    <content type="html">&lt;p&gt;在被 App Store Review 拒绝了一次之后，我的一款 Today Widget App 上线了，把过程中遇到的坑分享出来。&lt;/p&gt;
&lt;h3 id=&quot;1-_主_App_中要有内容&quot;&gt;1. 主 App 中要有内容&lt;/h3&gt;&lt;p&gt;第一次提交 App 时，只是在 Widget 中添加了内容，主 App 中仅有教用户如何添加插件的几张图片做教程，被拒绝上架了。&lt;br&gt;提醒大家，上架这类 App 时，就算主 App 中真的不需要添加其他内容，也要装模作样地加点功能性的摆设。&lt;br&gt;我现在正在用的一款插件 App 叫 N Stats，也是在主 App 中添加了奇怪的没什么用的功能，可以参考一下。&lt;/p&gt;
&lt;h3 id=&quot;2-_Widget_本身不适合承载复杂任务&quot;&gt;2. Widget 本身不适合承载复杂任务&lt;/h3&gt;&lt;p&gt;如果想要用 Widget App 来盈利，基本上只能是付费 App 了，没办法插广告，那就要求 App 本身比较稳定。&lt;br&gt;首先，最好不要让这里面出现交互（比如点一下按钮，这里面的内容会出现变化），而是仅仅让它承担【展示】的工作，比如呈现信息，或提供一个快捷操作的按钮。&lt;br&gt;其次，加载的图片资源要尽可能小。之前尝试让它一次加载了大概几百K的图片资源，就常常出现空白，或者显示“无法载入”。压缩了图片资源之后，一直很稳定。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在被 App Store Review 拒绝了一次之后，我的一款 Today Widget App 上线了，把过程中遇到的坑分享出来。&lt;/p&gt;
&lt;h3 id=&quot;1-_主_App_中要有内容&quot;&gt;1. 主 App 中要有内容&lt;/h3&gt;&lt;p&gt;第一次提交 App 时，只是在 Wid
    
    </summary>
    
    
      <category term="iOS 开发" scheme="/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>App 上架相关事宜、解决技巧</title>
    <link href="/2016/02/13/App-%E4%B8%8A%E6%9E%B6%E7%9B%B8%E5%85%B3%E4%BA%8B%E5%AE%9C%E3%80%81%E8%A7%A3%E5%86%B3%E6%8A%80%E5%B7%A7/"/>
    <id>/2016/02/13/App-上架相关事宜、解决技巧/</id>
    <published>2016-02-13T07:18:45.000Z</published>
    <updated>2016-04-09T16:08:56.000Z</updated>
    
    <content type="html">&lt;p&gt;在这篇文章中介绍一下，在 App 已经做完之后，到出现在 App Store 之前这段时间，可能需要了解的知识和会用到的技巧。&lt;/p&gt;
&lt;h3 id=&quot;App_审核委员会&quot;&gt;App 审核委员会&lt;/h3&gt;&lt;p&gt;这个团队的工作，是审核一款 App 是否可以在 AppStore 上架。他们会按照 &lt;a href=&quot;https://developer.apple.com/app-store/review/guidelines/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;App Store Review Guidelines&lt;/a&gt; 来认定你的 App 是否可以上架，然而几乎没有人把如此长的内容看完，里面很多内容也没有可以量化的标准，最终都是落实到这个审核团队的执行人员的个人考量上。这个团队的审核过程是完全黑箱操作的，不过在接触这个团队的过程中，还是有一些值得参考的信息可以被提炼出来。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;据不可靠消息，审核中国区 App 的这个团队的成员是身处在美国的华人，所以很可能他们是懂中文的。但为了保险起见，在 iTunes Connect 中提交 App 时如果需要写备注，或者是你想申请加急审核 App，又或者因为其他原因要和这个团队沟通，最好是用中英文两种语言都描述一遍，一起发过去。&lt;/li&gt;
&lt;li&gt;据我个人提交 App 被拒绝的经验，他们给出的回应信息是这种形式的：（1）陈列 &lt;a href=&quot;https://developer.apple.com/app-store/review/guidelines/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;App Store Review Guidelines&lt;/a&gt; 中的哪条或者哪几条，你没有遵守 （2）你的哪种具体做法违法了以上条例（3）接下来你该如何修改你的 App 才能过审。你可以选择向这个团队上诉，即表示他们的判断可能并不公正，同样是用双语去说，他们可能会在第二天给你个回复。但是注意，你上诉的方向一定要围绕着条例来说，因为对他们来说，苹果的规定就是铁律，违反规定是一定不能上架的，比如他们误认为你使用了 NBA 官方的 logo 侵犯了 NBA 的权益，你可以说这是误会，你使用的图片只是和 NBA logo 长得像而已。和他们动之以情是不会有结果的。&lt;/li&gt;
&lt;li&gt;iTunes Connect （简称 ITC）中，你的 App 的状态是要经历以下几个步骤的：（1）【准备提交】你在 ITC 中新建了一个 App（2）【正在准备审核】你提交了 App 之后，这个状态会保持一周左右，我最快一次是5天，最多一次差不多是15天（3）【正在审核】如果一切顺利，这个状态大约会只持续2小时，因为中美时差嘛，我遇到过很多次大概是1点左右正在审核，然后3点左右就上架了。还有几次这个状态持续了整整三天，如果你发现你的 App 已经处于正在审核状态好几个小时了，那就可以去干别的了，两天以内应该不会有什么动静。（4）【正在销售】处于这个状态之后，再过大约1小时，你的 App 就可以在 AppStore 被搜索到了。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;App_更改售价、下架&quot;&gt;App 更改售价、下架&lt;/h3&gt;&lt;p&gt;默认情况下 App 是在全世界的 AppStore 销售的，你随时可以去 ITC 更改 App 的售价，一般要花大概2小时，才能看见在 AppStore 上有变化。如果要下架 App，直接去 ITC 把销售地区全部反选就可以了，而不是说把这个 App 永久删除，下架是暂时性的，你可以理解为：销售 App，但销售地区个数为0。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;App_加急审核&quot;&gt;App 加急审核&lt;/h3&gt;&lt;p&gt;关于如何加急审核，教程有很多，只强调：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不要滥用加急审核，平时乱用，等到真正需要的时候，可能人家不鸟你了&lt;/li&gt;
&lt;li&gt;苹果很在意用户体验，你申请 App 更新加急审核的时候，要跟人家说，到底是什么严重影响了用户体验，要让人家可以重现这个 bug，那估计就会很顺利。但是建议不要故意留一个隐蔽的 bug，等下次更新的时候，更新了别的东西，然后说有这个 bug，申请加急，欺骗这个团队，万一被发现，后果可能很严重。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;不要欺骗_App_审核委员会&quot;&gt;不要欺骗 App 审核委员会&lt;/h3&gt;&lt;p&gt;以下行为最好都不要尝试：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上淘宝刷评论&lt;/li&gt;
&lt;li&gt;用 web 控制 App 的一部分行为，比如他们审核的时候，你后台用的是不侵权的图片资源，等过审了，再把图片换回来&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Application_Loader_网络问题&quot;&gt;Application Loader 网络问题&lt;/h3&gt;&lt;p&gt;可能是因为 GFW 的原因，Application Loader 会出现因为网络状况而无法上传 ipa 文件的情况，现在我这也没有截图，据经验，只要是等了5-10分钟，Application Loader 还没开始上传文件（就是出现类似迅雷那样的显示当前速度和 ipa 包体积的进度条），一直卡在什么“验证资源”之类的状态，那就不用再尝试这个网络环境了。&lt;br&gt;目前我在家里和学校用的都是电信的网络，都没发上传，不知道是否具有普适性。解决方案是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连星巴克的 WiFi 上传，每次都成功了（麦当劳和肯德基估计也可以，还没试过） &lt;/li&gt;
&lt;li&gt;用手机开热点（我是中国移动的卡，电信行不行不知道）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上传成功后，大约过20分钟，就可以在 ITC 的“构建版本”看到之前上传的文件。&lt;br&gt;上传过程不能中断，如果你中途暂停了某一个 ipa 文件的上传，再传这同一个文件，是传不上去的，去下面这个地方&lt;br&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/shangjia.png&quot; alt=&quot;Paste_Image.png&quot;&gt;把构建版本号改一下（数字只能更大，不能更小），然后导出 ipa，再上传。这个数字可以随意写，这个版本号是你的 ipa 的版本号，和你的 App  显示在 AppStore 的版本号没有关系。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;文件命名问题&quot;&gt;文件命名问题&lt;/h3&gt;&lt;p&gt;不管往苹果的服务器上传什么文件，PNG 也好 JPG 也好 IPA 也好，文件名称都尽量不要出现中文，上传之前改一下。&lt;br&gt;尤其是 ITC 的 App 页面中的那张 1024*1024 的图片，以中文命名，10次上传有8次要失败。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;暂时就写这么多，想到再更新。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在这篇文章中介绍一下，在 App 已经做完之后，到出现在 App Store 之前这段时间，可能需要了解的知识和会用到的技巧。&lt;/p&gt;
&lt;h3 id=&quot;App_审核委员会&quot;&gt;App 审核委员会&lt;/h3&gt;&lt;p&gt;这个团队的工作，是审核一款 App 是否可以在 AppStore 
    
    </summary>
    
    
      <category term="iOS 开发" scheme="/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>修改 present 出来的 ViewController 状态栏颜色</title>
    <link href="/2016/01/26/%E4%BF%AE%E6%94%B9-present-%E5%87%BA%E6%9D%A5%E7%9A%84-ViewController-%E7%8A%B6%E6%80%81%E6%A0%8F%E9%A2%9C%E8%89%B2/"/>
    <id>/2016/01/26/修改-present-出来的-ViewController-状态栏颜色/</id>
    <published>2016-01-26T07:20:55.000Z</published>
    <updated>2016-04-09T07:21:21.000Z</updated>
    
    <content type="html">&lt;p&gt;在开发的过程中，如果我们需要给用户提供一个浏览器功能的支持、又或者需要让用户来从系统相册挑选图片，那么利用 UIKit 给我们提供的现成的 SFSafariViewController 和 UIImagePickerController 将是非常方便的事情，但是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let pc = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;UIImagePickerController&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
let sf = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;SFSafariViewController&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(URL: NSURL(string:&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;像这样用一行代码来创建 ViewController，使我们丧失了进入这个 ViewController 的内部去调节一些东西的机会。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;比如说我们整个App都是采用的白色状态栏，而 SFSafariViewController 和 UIImagePickerController 都是默认背景为白色的（即需要一个黑色状态栏，否则用户看不清内容），这时候我们需要一个默认自身的状态栏永远为黑色的 SFSafariViewController 或 UIImagePickerController&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面以 UIImagePickerController 为例给出一种解决方案。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CustomImagePC&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UIImagePickerController&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()
        &lt;span class=&quot;type&quot;&gt;UIApplication&lt;/span&gt;.sharedApplication().setStatusBarStyle(&lt;span class=&quot;type&quot;&gt;UIStatusBarStyle&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Default&lt;/span&gt;, animated: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)
    }

    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;didReceiveMemoryWarning&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.didReceiveMemoryWarning()
    }

    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;viewWillDisappear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(animated: Bool)&lt;/span&gt;&lt;/span&gt; {
        &lt;span class=&quot;type&quot;&gt;UIApplication&lt;/span&gt;.sharedApplication().setStatusBarStyle(&lt;span class=&quot;type&quot;&gt;UIStatusBarStyle&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;LightContent&lt;/span&gt;, animated: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如上所示，创建了一个自定义的 UIImagePickerController ，代码里面设定了：这个页面被加载之后，状态栏设置为黑色，页面即将消失时，状态栏再转为白色。调用的时候，直接&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let pc = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;CustomImagePC&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SFSafariViewController 同理，当然你也可以在这些代码里插入其他内容，如果你想更高程序地定制一个 UIImagePickerController 的话。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在开发的过程中，如果我们需要给用户提供一个浏览器功能的支持、又或者需要让用户来从系统相册挑选图片，那么利用 UIKit 给我们提供的现成的 SFSafariViewController 和 UIImagePickerController 将是非常方便的事情，但是&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="iOS 开发" scheme="/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>在 App 中加入 AdMob 广告 - 入门介绍与编程技巧</title>
    <link href="/2016/01/18/%E5%9C%A8-App-%E4%B8%AD%E5%8A%A0%E5%85%A5-AdMob-%E5%B9%BF%E5%91%8A-%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    <id>/2016/01/18/在-App-中加入-AdMob-广告-入门介绍与编程技巧/</id>
    <published>2016-01-18T07:19:57.000Z</published>
    <updated>2016-04-09T16:10:16.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;/p&gt;&lt;h3&gt;前言&lt;/h3&gt;&lt;br&gt;虽然在App中加入广告来盈利是比较低级的商业化方式，但对于个人开发者或者小团队开发者来说，做出一个简单易用的免费小工具（举个栗子），在里面加入一些广告，如果用的人多，也是可以带来一些可观的收入的。用户没有掏钱，得到了方便，开发者也得到了回报：）&lt;p&gt;&lt;/p&gt;
&lt;p&gt;我个人出于对金钱的考虑和对Google的信任，选择了AdMob这个平台来在App中投放广告（&lt;a href=&quot;https://apps.admob.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://apps.admob.com&lt;/a&gt; 访问需要搭梯子，梯子为SS的用户最好全局代理，自动代理的话访问起来会很卡）。&lt;/p&gt;
&lt;p&gt;就目前来看，我果还是不太擅长移动App广告这一块，所以不推荐大家用iAd（好像现在还是不支持中国大陆？听说前一阵子Apple解散了有一百来人的iAd部门？）国内的一些其他平台也是有所听说，但是没有尝试，如果大家知道有什么其他的好的可以在移动App上投放广告的平台，也欢迎评论，一起交流~&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;流程&lt;/h3&gt;&lt;br&gt;1.首先，你要有一个Google账号，登录&lt;a href=&quot;https://apps.admob.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AdMob&lt;/a&gt;&lt;br&gt;2.进去之后，点网站右上角的设置按钮，把各种资料该填的都填了，什么电话、邮箱、地址之类的。&lt;br&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/mob0.png&quot; alt=&quot;AdMob网站截图&quot;&gt;&lt;br&gt;&lt;strong&gt;注意，地址要填真实地址，在Google给你汇款之前，他要给你邮寄一封实体信件，上面有一个PIN码，你要把这个PIN码输入到AdMob网站上的相应位置，Google才会开始你给你汇款。我现在已经验证过身份了，没办法截图，好在这个网站也不复杂，就那么几个页面。要做好收不到这个信件的准备（包括我在内的国内N多开发者都收不到这个信件，不知道是不是邮政的问题），如果1个月没有收到这个信件，可以再次申请让Google邮寄信件，总共有3次机会，3个月以后，还没收到信件，可以上传身份证照片（我就是这样），然后Google会以极速（我当时是几个小时）通过这个请求。不过毕竟等了三个月，如果你第一次就准确无误地填了地址，运气又很好的话，可以1个月内就让Google准备给你付款。付款规则是每个月进行一次统计，如果到了100美金，就汇款，否则计入下个月，直到攒够100美金，汇款时间是下个月的21号。比如你1月赚了30刀，2月就不会收到钱，2月赚了110刀，3月的21号Google会把你赚到的总共140刀都汇款给你。&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;3.接下来的过程就不赘述了，无非是去AdMob里面添加个应用，拿到一个类似 app-key 的识别码（AdMob里面叫ca-app-pub，每个广告对应一个识别码，一个App可以加入多个横幅式广告或插页式广告，一个App可以对应多个识别码），把 GoogleMobileAds.framework 下载下来，看一下人家的示例代码，就集成到App了。&lt;a href=&quot;https://developers.google.com/admob/ios/quick-start&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这是地址&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;横幅式广告与插页式广告&lt;/h3&gt;&lt;br&gt;开发者在App中加入广告时，要极力避免让用户感到非常厌烦。如果你的App帮用户解决了问题，那用户看看广告也无所谓，人家解决了手头的问题才是正事，但是满屏的广告不停地弹，那也未免吃相不好，用户可能一怒之下把App删掉。&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/mob1.png&quot; alt=&quot;左边为横幅式广告  右边为插页式广告&quot;&gt;&lt;br&gt;横幅式广告的好处在于，虽然占用了用户一部分屏幕空间，但是只要你不点击它，它不会影响用户的其他操作，只要你的广告条没有遮挡任何内容，那么这个横幅除了碍眼之外，对用户使用App基本没有影响。&lt;/p&gt;
&lt;p&gt;而插页式广告则是以弹窗的形式出现，用户需要去左上角或者右上角点击一下关闭按钮才行，应该说是比横幅式广告要更讨厌一些（反正我是这么觉得的），应该说这是略为严重的打扰了用户对App的使用的。但是好处在于，插页式广告是以全屏弹出的形式出现的，它不影响你设计的App界面的纯净度，让你有100%的空间来展示你需要布局在UI中的东西，比如你做了一个UI极简的应用，整个App都是纯黑+纯白的，这时候加一个颜色复杂的横幅广告，就很影响观感。&lt;/p&gt;
&lt;p&gt;还有一种情况是你希望你的用户付费来去除广告，可以是在App中加一个付费去广告的内购，也可以鼓励用户付费升级应用到高级版，这种情况下可以尝试横幅式广告和插页式广告都添加。一部分用户对你的App有需求，又不想频频被广告打扰，就可以选择付费。不过这种情况下，我们可以认为添加广告的目的之一就是为了去打扰用户，迫使用户付费，所以应该适可为止，不要过于频繁地弹出广告，这真的挺烦人的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;展示广告的代码技巧&lt;/h3&gt;&lt;br&gt;&lt;strong&gt;1.在 UITableView 底部展示横幅广告&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;var&lt;/span&gt; admob = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;GADBannerView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// 设置GADBannerView的frame、设置广告ID、加载广告请求&lt;/span&gt;
self&lt;span class=&quot;class&quot;&gt;.tableView&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.contentInset&lt;/span&gt; = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;UIEdgeInsetsMake&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, admob.frame.height, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注释部分的代码可以&lt;a href=&quot;https://developers.google.com/admob/ios/quick-start&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考这里&lt;/a&gt;，这段代码的意思是让 UITableView 的可滚动内容区域在底部收缩，收缩长度为banner广告条的高度。这样在用户一直向上拖拽 UITableView 直到尽头的时候，可以让它的可拖拽区域比之前大一些，就不至于让广告遮挡了 UITableView 的最后几行。&lt;/p&gt;
&lt;p&gt;如果你的 UITableView 是存在于 UITableViewController 中的，那么 UITableView 的 frame 是不可调节的，所以通过上面的代码，我们可以方便地避免广告遮挡原有的内容。而即便你的 UITableView 是存在于 UIViewController 中的，即这个 UITableView 是你自己添加进来的，你可以任意调节 frame，我依然建议你用上面这种方法，而不是直接把 UITableView 的 frame 调小，来给广告空出位置。因为你的广告并不一定能显示的出来，可能是用户把你的广告屏蔽了，也可能是网络状况不好，这时候反正你的广告也显示不出来，应该给用户更多的屏幕空间来显示 UITableView 的内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.利用定时器轮询插页式广告加载状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里不太恰当的使用了“轮询”这个词，大家意会就好。&lt;br&gt;假如你要弹出一次插页式广告，那么Google给出的示例代码是下面这个样子&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/mob2.png&quot; alt=&quot;如何创建 GADInterstitial
 媒体资源、初始化该资源并随广告加载它&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/mob3.png&quot; alt=&quot;展示插页式广告&quot;&gt;&lt;br&gt;这里的展示逻辑是：不要打扰用户玩游戏的过程，在用户玩游戏的过程中默默地加载广告，等用户一次游戏结束了，如果这时候广告加载好了，就把广告弹出来。&lt;/p&gt;
&lt;p&gt;然而实际情况是，我们的应用可能不是游戏，并没有一个这么明显的类似&lt;strong&gt;完成了一局游戏&lt;/strong&gt;这样的一个段落结束的地方。这时候你可能希望每30秒弹出一次插页式广告，然而这个广告可能是第40秒才加载好的，这就导致了：虽然你设置的是30秒显示一次广告，但是30s的时候广告没加载好，就没显示出来，60s的时候显示了40s时加载的广告。而更理想的情况是：30s时没能加载好广告，我们就开始轮询，直到广告加载好了，也就是40s时，把广告显示出来，然后设定第70s时展示下一次广告。&lt;/p&gt;
&lt;p&gt;下面给出一段示例代码，这里的广告展示逻辑是：每60秒展示一次广告，如果到了这个时刻，广告没加载好，就设置定时器每3秒查看一次广告资源是否就绪，直到广告加载好了，展示广告，然后设置60秒后出现下一次广告。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; UIKit

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExampleViewController&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UIViewController&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;comment&quot;&gt;// AdMob 插页广告&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; adInterstitial = &lt;span class=&quot;type&quot;&gt;GADInterstitial&lt;/span&gt;(adUnitID: &lt;span class=&quot;string&quot;&gt;&quot;ca-app-pub-xxxx/xxxx&quot;&lt;/span&gt;)
    &lt;span class=&quot;comment&quot;&gt;// 定时器&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timer = &lt;span class=&quot;type&quot;&gt;NSTimer&lt;/span&gt;()


    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()

        &lt;span class=&quot;comment&quot;&gt;// 初始化 AdMob 插页广告&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; gadRequest1 = &lt;span class=&quot;type&quot;&gt;GADRequest&lt;/span&gt;()
        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.adInterstitial.loadRequest(gadRequest1)
        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.addTimerToShowAd(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 3秒一次轮询直到第一次展示广告&lt;/span&gt;
    }


    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;didReceiveMemoryWarning&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.didReceiveMemoryWarning()
    }


    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addTimerToShowAd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( showAdTimeInterval:NSTimeInterval)&lt;/span&gt;&lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.timer = &lt;span class=&quot;type&quot;&gt;NSTimer&lt;/span&gt;.scheduledTimerWithTimeInterval( showAdTimeInterval, target: &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;,
            selector: &lt;span class=&quot;string&quot;&gt;&quot;showAd&quot;&lt;/span&gt;, userInfo: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, repeats: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)
        [&lt;span class=&quot;type&quot;&gt;NSRunLoop&lt;/span&gt;.currentRunLoop().addTimer(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.timer, forMode: &lt;span class=&quot;type&quot;&gt;NSRunLoopCommonModes&lt;/span&gt;)]
    }


    &lt;span class=&quot;preprocessor&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showAd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.adInterstitial.isReady {
            &lt;span class=&quot;comment&quot;&gt;// 广告成功加载，显示广告，重置定时器&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.adInterstitial.presentFromRootViewController(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;)
            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.timer.invalidate()
            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.addTimerToShowAd(&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;)
        }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;comment&quot;&gt;// 广告没有成功加载，开始3秒一次的快速轮询&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.timer.invalidate()
            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.addTimerToShowAd(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的代码中的关于定时器方面的内容，就不在这篇文章中写了，如果看着费劲的话，欢迎在下面评论，我也可以再写一篇关于定时器的文章。关于 private 和 @objc 关键字部分可以参考&lt;a href=&quot;http://www.jianshu.com/p/41676664aac6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我之前的一篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本人现在还是学生，兼做 iOS 独立开发者积累&lt;a href=&quot;https://itunes.apple.com/developer/id988271193&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;作品&lt;/a&gt;，也顺便赚点银子，欢迎有兴趣的加微信交流技术问题，微信号：balabala-ba。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;h3&gt;前言&lt;/h3&gt;&lt;br&gt;虽然在App中加入广告来盈利是比较低级的商业化方式，但对于个人开发者或者小团队开发者来说，做出一个简单易用的免费小工具（举个栗子），在里面加入一些广告，如果用的人多，也是可以带来一些可观的收入的。用户没有掏钱，得到了方便，开发者也得到了
    
    </summary>
    
    
      <category term="iOS 开发" scheme="/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>@objc private class func 与 Selector</title>
    <link href="/2015/12/15/objc-private-class-func-%E4%B8%8E-Selector/"/>
    <id>/2015/12/15/objc-private-class-func-与-Selector/</id>
    <published>2015-12-15T07:21:35.000Z</published>
    <updated>2016-04-09T07:22:11.000Z</updated>
    
    <content type="html">&lt;p&gt;本文介绍在 Swift 中 使用 KVO 时，一些需要注意的事项，下面截取了两段我自己在项目中使用的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.timer&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.scheduledTimerWithTimeInterval&lt;/span&gt;(timeInterval, target: &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;,
        selector: &lt;span class=&quot;string&quot;&gt;&quot;moveText&quot;&lt;/span&gt;, userInfo: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, repeats: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)

&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.defaultCenter&lt;/span&gt;()&lt;span class=&quot;variable&quot;&gt;.addObserver&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;,
        selector: &lt;span class=&quot;string&quot;&gt;&quot;appEnterForeground&quot;&lt;/span&gt;, name: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, object: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一个是第一个定时器（NSTimer），第二个是一个页面的监听事件。即，让程序不断地观察现在的『某个状态』，当这个状态符合某个条件时，就去执行 Selector 中的代码。比如，我们的界面中有一个让用户输入年龄的 UITextField，然后我们可以观察（监听），当发现用户在这里输入『0』时，我们就给一个提示：『年龄至少为1』。&lt;/p&gt;
&lt;p&gt;简单介绍完毕，下面说注意事项。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;1.  private 关键字&lt;/h3&gt;&lt;br&gt;最简单的使用 Selector 的情况，就是如上面所列出的，在 NSTimer 中写 selector 为 “moveText”，然后我们在同一个文件中，再相应地写一个&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;moveText&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{ 
    &lt;span class=&quot;comment&quot;&gt;// Your Code&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就可以了。&lt;br&gt;然而如果你想把它声明为一个 private func，即不希望其他文件调用这个函数，就会出现问题，通俗地讲：private 使得这个函数不能被『外部』调用，而 Selector 对它的调用，实际上就是一种『外部调用』。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【解决方案】&lt;/strong&gt;&lt;br&gt;KVO 是基于 KVC 和&lt;strong&gt;动态派发技术（Dynamic Dispatch）&lt;/strong&gt;的，Swift 为了效率禁用了 Objective-C 中有的动态派发。那么你把这个动态特性再加回来就可以了~&lt;/p&gt;
&lt;p&gt;1.通过 @objc 关键字来使用动态特性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;moveText&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{ 
    &lt;span class=&quot;comment&quot;&gt;// Your Code&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.通过 dynamic 关键字来让这个函数拥有与 OC 中动态调用时相同的运行时特性（@objc 足矣，这个一般用不上）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;moveText&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{ 
    &lt;span class=&quot;comment&quot;&gt;// Your Code&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更多关于 dynamic 关键字的内容可以参考：&lt;a href=&quot;http://swifter.tips/kvo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://swifter.tips/kvo/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;2.  class 关键字&lt;/h3&gt;&lt;br&gt;如果你想把这个函数声明为 class func&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;moveText&lt;/span&gt;()&lt;/span&gt;{ 
    &lt;span class=&quot;comment&quot;&gt;// Your Code&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;则本文最开始的代码中的 target 应该由 self 换为 MyClass.self （假设这段代码写在名为 MyClass 的类中）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.timer = &lt;span class=&quot;constant&quot;&gt;NSTimer.&lt;/span&gt;scheduledTimerWithTimeInterval(timeInterval, &lt;span class=&quot;symbol&quot;&gt;target:&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;MyClass.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;,
        &lt;span class=&quot;symbol&quot;&gt;selector:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;moveText&quot;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;userInfo:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;repeats:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;最后， 以上关键字是可以叠加使用的，如果你愿意，可以写成下面这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;annotation&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;moveText&lt;/span&gt;(){&lt;/span&gt; 
    &lt;span class=&quot;comment&quot;&gt;// Your Code&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我在 StackOverFlow 中的回答，及其它相关：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/30027322/how-to-call-private-class-function-from-selector-in-swift/34291667#34291667&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/30027322/how-to-call-private-class-function-from-selector-in-swift/34291667#34291667&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/28184350/4-questions-about-selectors-in-swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/28184350/4-questions-about-selectors-in-swift&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如有谬误，欢迎在评论中指出。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍在 Swift 中 使用 KVO 时，一些需要注意的事项，下面截取了两段我自己在项目中使用的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.timer&lt;/span
    
    </summary>
    
    
      <category term="iOS 开发" scheme="/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>带有 Extension Target 的 App，如何签名打包</title>
    <link href="/2015/11/26/%E5%B8%A6%E6%9C%89-Extension-Target-%E7%9A%84-App%EF%BC%8C%E5%A6%82%E4%BD%95%E7%AD%BE%E5%90%8D%E6%89%93%E5%8C%85/"/>
    <id>/2015/11/26/带有-Extension-Target-的-App，如何签名打包/</id>
    <published>2015-11-26T07:23:12.000Z</published>
    <updated>2016-04-09T16:15:24.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/ex0.png&quot; alt=&quot;Extension Target&quot;&gt;&lt;br&gt;如果我们要开发一款类似 AdBlock 的应用，就需要添加一个 Extension Target，如上图。&lt;br&gt;添加完了之后，你的项目看起来是这个样子的：&lt;br&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/ex1.png&quot; alt=&quot;Xcode ScreenShot&quot;&gt;&lt;br&gt;那么就会有两个 Target，这个时候，怎么进行 CodeSign，折磨了我一段时间，分享出来。&lt;/p&gt;
&lt;p&gt;1.把你的两个 TARGET 的 Bundle Identifier 写成【开头一样的】。在 Member Center 申请发布到 AppStore 的 Provisioning Profile 的时候，只要申请一份就可以了，即给和你的 App 同名的那个申请。&lt;br&gt;（假如你的App的名字是 wechat，主 Target 的 Bundle ID 写成 com.xky.wechat, Extension Target 的 Bundle ID 写成 com.xky.wechat.ex, 那么你的 Provisioning Profile 只要和 com.xky.wechat 捆绑； “com.xky.wechat.ex” 除了要写在相应的 Target 上，不需要再有与其相匹配的 Provisioning Profile）&lt;/p&gt;
&lt;p&gt;2.两个 TARGET 的 Build Settings-&amp;gt;Code Signing-&amp;gt;Provisioning Profile 那里都选择 Automatic&lt;br&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/ex2.png&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;br&gt;3.真正自己设置  Build Settings-&amp;gt;Code Signing-&amp;gt;Provisioning Profile 是要进行 Develop（测试）还是 Distribution（打包），在 PROJECT 那里设置：&lt;br&gt;（让 TARGET 的设置自动化，否则你每次改动设置都要同时改3个）&lt;br&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/ex3.png&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xssu3.com2.z0.glb.clouddn.com/ex0.png&quot; alt=&quot;Extension Target&quot;&gt;&lt;br&gt;如果我们要开发一款类似 AdBlock 的应用，就需要添加一个 Extension Target，如上图。
    
    </summary>
    
    
      <category term="iOS 开发" scheme="/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
